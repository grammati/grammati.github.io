{"pageProps":{"post":{"title":"Reading stderr in Ruby and Python","slug":"blog/2009-06-02-reading-stderr-in-ruby-and-python","datePublished":"2009-06-02T00:00:00.000Z","mdx":{"compiledSource":"var l=Object.defineProperty,p=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var u=(e,o,t)=>o in e?l(e,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[o]=t,r=(e,o)=>{for(var t in o||(o={}))a.call(o,t)&&u(e,t,o[t]);if(s)for(var t of s(o))i.call(o,t)&&u(e,t,o[t]);return e},d=(e,o)=>p(e,m(o));var h=(e,o)=>{var t={};for(var n in e)a.call(e,n)&&o.indexOf(n)<0&&(t[n]=e[n]);if(e!=null&&s)for(var n of s(e))o.indexOf(n)<0&&i.call(e,n)&&(t[n]=e[n]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var n=t,{components:e}=n,o=h(n,[\"components\"]);return mdx(MDXLayout,d(r(r({},layoutProps),o),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"When I learned Ruby, one of the things that immediately struck me was how much easier it is than Python for doing simple, shell-scripting, sys-admin-y type tasks.  I was in love with backticks - running a shell command just seemed soooo much easier than fiddling around with Python's arcane subprocess module, which I never really liked. But I always had the slightly uneasy feeling that Ruby was probably just making the simple, 80% case easy. Today, that was confirmed.\",mdx(\"br\",null),mdx(\"br\",null),\"The command I want to run today is \",mdx(\"inlineCode\",{parentName:\"p\"},\"p4 opened\"),`.  The problem is that if I am not logged in to Perforce, the command returns nothing in stdout, but prints an error message to stderr. I want to capture the message.  \"No problem,\" I thought.  \"I'm just hitting the 20% case for the first time.\"  So off I go to look up Kernel.open, and Kernel.system, and IO.popen, Open3.popen3, etc...`,mdx(\"br\",null),mdx(\"br\",null),\"Let's jump to the punchline: guess how you read the stderr of a subprocess in Ruby on Windows?  Drumroll...  You can't!  No, really, I'm not kidding.  You actually cannot do it.  WTF?\",mdx(\"br\",null),mdx(\"br\",null),\"So, back to trusty old Python:\",mdx(\"br\",null),mdx(\"br\",null),\"from subprocess import Popen, PIPE\",mdx(\"br\",null),\"p = subprocess.Popen(\",\"['p4', 'opened']\",\", stdout=PIPE, stderr=PIPE)\",mdx(\"br\",null),\"out= p.stdout.read()\",mdx(\"br\",null),\"err = p.stderr.read()\",mdx(\"br\",null),mdx(\"br\",null),\"Hmm, good old subprocess sure doesn't look so ugly to me anymore. It may not have the cool-factor of backticks, but dammit, it works!  That counts for a hell of a lot.\"))}MDXContent.isMDXComponent=!0;\n"}}},"__N_SSG":true}