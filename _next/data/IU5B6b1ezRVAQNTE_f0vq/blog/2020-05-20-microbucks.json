{"pageProps":{"post":{"title":"Microbucks","slug":"blog/2020-05-20-microbucks","published":true,"datePublished":"2020-05-20T00:00:00.000Z","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"When estimating the cost of AWS services, I like to think in microbucks.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"What is a microbuck? It is one millionth of a dollar, or one ten-thousandth of a\\ncent.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"AWS pricing can be complicated. But when you work it out, it turns out that the\\ncost of a lot of commonly-used, pay-per-use services can be easily estimated in\\nmicrobucks (µ$)\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Per-Service Costs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note: all of these estimates ignore the free tier.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Lambda\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Lambdas cost about 1 µ$ per invocation. How so?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Making two assumptions:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"We use 512 MB of memory, which is pretty reasonable for many lambdas, and\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"We finish in under 100 ms, and so get billed for 100 ms of time.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then the cost comes out to about 0.8 µ$. Added to the per-request price of 0.2\\nµ$ per invocation, we get the handy rule of thumb:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"1 microbuck per lambda invocation.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"API Gateway\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Calls to an HTTP API cost 1 µ$. Simple.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Calls to a REST API cost 3.5 µ$.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"DynamoDB\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With on-demand capacity, writes cost 1.25 µ$ for items under 1 kb. Reads up 4 kb\\nare one tenth of that, so almost free.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Storage is 0.25 µ$ per item per month, assuming 1 kb items. So 3 µ$ per year.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Publishing to EventBridge costs 1 µ$ per event.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SQS cost 0.4 µ$, but that's per-call. You'll need 3 calls - publish, then read,\\nthen ack. So it also ends up being about a microbuck per message.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"S3\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Write requests cost 5 µ$ each. Read requests are 0.4 µ$.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Storage: for 1 µ$, you can store 40 kb of data for a month.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"CloudWatch Logs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Half a µ$ per kb logged.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step functions\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"These are an outlier - they cost 25 µ$ per state transition. That can easily\\ndominate your costs.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Express workflows are priced in a completely different way - you pay 1 µ$ per\\ninvocation, plus lambda pricing for the whole duration of the function, start to\\nfinish. It's not yet clear to me what you would use express workflows for, so\\nI'll say no more.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"SES\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"100 µ$ per email sent. Ouch.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Examples\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's say you have a pretty standard serverless app. You can\\nback-of-the-envelope the costs like this:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Request comes in to API Gateway: 1 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"API Gateway invokes a lambda: 1 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Lambda writes an item to DynamoDB: 1 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Lambda does some logging to CloudWatch: 1 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Total: 4 µ$\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So if your app handles a million requests, it will cost you four bucks.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Another example:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Request comes in to API Gateway: 1 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"API Gateway invokes a lambda: 1 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Lambda writes an item to DynamoDB: 1 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Lambda does some logging to CloudWatch: 1 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Lambda publishes an event to EventBridge 1 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Another lambda consumes the event: 1 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Lambda 2 writes some data to S3: 5 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Lambda 2 also does some logging: 1 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Total: 12 µ$\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So, 12 bucks per million requests.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And one more example:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Request comes in to API Gateway: 1 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"API Gateway invokes a lambda: 1 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Lambda starts a step function with 5 states / 4 transitions: 100 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"One of the steps sends an email: 100 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The other steps do some stuff, whatever, let's call it another 5 µ$\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Total: 207 µ$\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The step function and the email really killed us.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It's interesting to note that:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Sending a single email can cost much more than all the other things you do in\\nhandling a request.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Step Functions can really add up, especially if you have a retry-loop in your\\nstate machine. Even in the happy-path, a state machine with just 5 states will\\ncost 100 µ$ per invocation (4 state-transitions), which is huge compared to\\nthe simple API example above at 4 µ$. Add in a retry-loop and it can be a\\nwhole lot more.\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"__N_SSG":true}