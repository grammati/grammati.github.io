{"pageProps":{"post":{"title":"Thoughts on Visibility (in Clojure)","slug":"blog/2016-12-10-thoughts-on-visibility","published":true,"datePublished":"2016-12-10T00:00:00.000Z","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"I just spent a couple of days debugging some Clojure code (most of which I wrote\\nmyself), and it was not all that pleasant.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I want better tools. I have for years. The tools have gotten vastly better over\\nthe years I have been doing Clojure, but we can still do much better.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Having just seen several great talks about tools at Clojure Conj, I'm convinced\\nthat we can do better right now. In particular:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Proto-REPL - Jason showed off exactly the kind of data-structure\\nvisualizations that I have been dreaming of for years. I sure do love me some\\nemacs, but I could be convinced to change if this thing is good enough.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Sayid - Bill gave a glimpse into the future with a tool that captures a\\ncomplete record of a program's execution, fully inspectable. This, too, I have\\nbeen dreaming of for years. (I even started to write almost exactly the same\\nthing myself, \", _jsx(_components.a, {\n          href: \"https://github.com/grammati/rosco\",\n          children: \"here\"\n        }), \", but didn't get nearly\\nas far with it as Bill has).\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition, there were a \", _jsx(_components.em, {\n        children: \"lot\"\n      }), \" of talks about clojure.spec, and I'm embarrassed\\nto admit that I haven't really tried it yet, but I have high hopes.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Finally, spectrum looks extremely promising - it's more-or-less a static type\\nchecker for Clojure.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to all that, I'm becoming convinced that I need to make more effort\\nto build visibility into my programs. I do plenty of logging, but poring through\\nlogs sucks. I'm not entirely sure how to go about this, but in general I'm\\nthinking about putting in more \\\"dev-mode only\\\" code that captures data in\\nvarious places (eg: messages received on a kafka queue) and exposes them\\nthrough special, dev-mode only HTTP endpoints. I'll need to explore this to get\\na more concrete idea of what would be useful.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"}}},"__N_SSG":true}