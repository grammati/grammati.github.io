<feed><id>urn:pro-grammati-ca:feed</id><updated>2020-05-20T00:00:00.000Z</updated><title type="text">pro.grammati.ca</title><link rel="self" href="http://pro.grammati.ca/atom.xml" /><entry><title>Microbucks</title><updated>2020-05-20T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2020/05/20/microbucks/" /><id>urn:pro-grammati-ca:feed:post:Microbucks</id><content type="html">&lt;h1&gt;Thinking in Microbucks&lt;/h1&gt;&lt;p&gt;When estimating the cost of AWS services, think in microbucks.&lt;/p&gt;&lt;p&gt;What is a microbuck? It is one millionth of a dollar, or one ten-thousandth of a cent.&lt;/p&gt;&lt;p&gt;AWS pricing can be complicated. But when you work it out, it turns out that a lot of commonly-used, pay-per-use services can be pretty well estimated in microbucks (µ$)&lt;/p&gt;&lt;h2&gt;Per-Service Costs&lt;/h2&gt;&lt;p&gt;Note: all of these estimates ignore the free tier.&lt;/p&gt;&lt;h3&gt;Lambda&lt;/h3&gt;&lt;p&gt;Lambda pricing is 0.2 µ$ per request, plus a cost per GB-second. Making two assumptions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;We use 512 MB of memory, which is pretty reasonable for many lambdas, and&lt;/li&gt;&lt;li&gt;We finish in under 100 ms, and so get billed for 100 ms of time.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Then the cost comes out to about 0.8 µ$. Added to the per-request price, we get a handy rule of thumb:&lt;/p&gt;&lt;p&gt;1 microbuck per lambda invocation.&lt;/p&gt;&lt;h3&gt;API Gateway&lt;/h3&gt;&lt;p&gt;Calls to an HTTP API cost 1 µ$. Simple.&lt;/p&gt;&lt;p&gt;Calls to a REST API cost 3.5 µ$.&lt;/p&gt;&lt;h3&gt;DynamoDB&lt;/h3&gt;&lt;p&gt;With on-demand capacity, writes cost 1.25 µ$ for items under 1 kb. Reads up 4 kb are one tenth of that, so almost free.&lt;/p&gt;&lt;p&gt;Storage is 0.25 µ$ per item per month, assuming 1 kb items. So 3 µ$ per year.&lt;/p&gt;&lt;h3&gt;Events&lt;/h3&gt;&lt;p&gt;Publishing to EventBridge costs 1 µ$ per event.&lt;/p&gt;&lt;p&gt;SQS cost 0.4 µ$, but that's per-call. You'll need 3 calls - publish, then read, then ack. So it also ends up being about a microbuck per message.&lt;/p&gt;&lt;h3&gt;S3&lt;/h3&gt;&lt;p&gt;Write requests cost 5 µ$ each. Read requests are 0.4 µ$.&lt;/p&gt;&lt;p&gt;Storage: for 1 µ$, you can store 40 kb of data for a month.&lt;/p&gt;&lt;h3&gt;CloudWatch Logs&lt;/h3&gt;&lt;p&gt;Half a µ$ per kb logged.&lt;/p&gt;&lt;h3&gt;Step functions&lt;/h3&gt;&lt;p&gt;These are an outlier - they cost 25 µ$ per state transition. That can easily dominate your costs.&lt;/p&gt;&lt;p&gt;Express workflows are priced in a completely different way - you pay 1 µ$ per invocation, plus lambda pricing for the whole duration of the function, start to finish. It's not yet clear to me what you would use express workflows for, so I'll say no more.&lt;/p&gt;&lt;h3&gt;SES&lt;/h3&gt;&lt;p&gt;100 µ$ per email sent. Ouch.&lt;/p&gt;&lt;h2&gt;Examples&lt;/h2&gt;&lt;p&gt;Let's say you have a pretty standard serverless app. You can back-of-the-envelope the costs like this:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Request comes in to API Gateway: 1 µ$&lt;/li&gt;&lt;li&gt;API Gateway invokes a lambda: 1 µ$&lt;/li&gt;&lt;li&gt;Lambda writes an item to DynamoDB: 1 µ$&lt;/li&gt;&lt;li&gt;Lambda does some logging to CloudWatch: 1 µ$&lt;/li&gt;&lt;li&gt;Total: 4 µ$&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So if your app handles a million requests, it will cost you four bucks.&lt;/p&gt;&lt;p&gt;Another example:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Request comes in to API Gateway: 1 µ$&lt;/li&gt;&lt;li&gt;API Gateway invokes a lambda: 1 µ$&lt;/li&gt;&lt;li&gt;Lambda writes an item to DynamoDB: 1 µ$&lt;/li&gt;&lt;li&gt;Lambda does some logging to CloudWatch: 1 µ$&lt;/li&gt;&lt;li&gt;Lambda publishes an event to EventBridge 1 µ$&lt;/li&gt;&lt;li&gt;Another lambda consumes the event: 1 µ$&lt;/li&gt;&lt;li&gt;Lambda 2 writes some data to S3: 5 µ$&lt;/li&gt;&lt;li&gt;Lambda 2 also does some logging: 1 µ$&lt;/li&gt;&lt;li&gt;Total: 12 µ$&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So, 12 bucks per million requests.&lt;/p&gt;&lt;p&gt;And one more example:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Request comes in to API Gateway: 1 µ$&lt;/li&gt;&lt;li&gt;API Gateway invokes a lambda: 1 µ$&lt;/li&gt;&lt;li&gt;Lambda starts a step function with 5 states / 4 transitions: 100 µ$&lt;/li&gt;&lt;li&gt;One of the steps sends an email: 100 µ$&lt;/li&gt;&lt;li&gt;The other steps do some stuff, whatever, let's call it another 5 µ$&lt;/li&gt;&lt;li&gt;Total: 207 µ$&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The step function and the email really killed us.&lt;/p&gt;&lt;p&gt;It's interesting to note that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Sending a single email can cost much more than all the other things you do in handling a request.&lt;/li&gt;&lt;li&gt;Step Functions can really add up, especially if you have a retry-loop in your state machine. Even in the happy-path, a state machine with just 5 states will cost 100 µ$ per invocation (4 state-transitions), which is huge compared to the simple API example above at 4 µ$. Add in a retry-loop and it can be a whole lot more.&lt;/li&gt;&lt;/ul&gt;</content></entry><entry><title>Thoughts on Visibility (in Clojure)</title><updated>2016-12-10T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2016/12/10/thoughts-on-visibility/" /><id>urn:pro-grammati-ca:feed:post:Thoughts on Visibility (in Clojure)</id><content type="html">&lt;p&gt;I just spent a couple of days debugging some Clojure code (most of which I wrote myself), and it was not all that pleasant.&lt;/p&gt;&lt;p&gt;I want better tools. I have for years. The tools have gotten vastly better over the years I have been doing Clojure, but we can still do much better.&lt;/p&gt;&lt;p&gt;Having just seen several great talks about tools at Clojure Conj, I'm convinced that we can do better right now. In particular:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Proto-REPL - Jason showed off exactly the kind of data-structure visualizations that I have been dreaming of for years. I sure do love me some emacs, but I could be convinced to change if this thing is good enough.&lt;/li&gt;&lt;li&gt;Sayid - Bill gave a glimpse into the future with a tool that captures a complete record of a program's execution, fully inspectable. This, too, I have been dreaming of for years. (I even started to write almost exactly the same thing myself, &lt;a href="https://github.com/grammati/rosco"&gt;here&lt;/a&gt;, but didn't get nearly as far with it as Bill has).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In addition, there were a &lt;em&gt;lot&lt;/em&gt; of talks about clojure.spec, and I'm embarrassed to admit that I haven't really tried it yet, but I have high hopes.&lt;/p&gt;&lt;p&gt;Finally, spectrum looks extremely promising - it's more-or-less a static type checker for Clojure.&lt;/p&gt;&lt;p&gt;In addition to all that, I'm becoming convinced that I need to make more effort to build visibility into my programs. I do plenty of logging, but poring through logs sucks. I'm not entirely sure how to go about this, but in general I'm thinking about putting in more "dev-mode only" code that captures data in various places (eg: messages received on a kafka queue) and exposes them through special, dev-mode only HTTP endpoints. I'll need to explore this to get a more concrete idea of what would be useful.&lt;/p&gt;</content></entry><entry><title>Cider Debug Wishlist</title><updated>2016-02-02T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2016/02/02/cider-debug-wishlist/" /><id>urn:pro-grammati-ca:feed:post:Cider Debug Wishlist</id><content type="html">&lt;h2&gt;Step In&lt;/h2&gt;&lt;p&gt;When stepping through code in the debugger, you can only step through functions that you have explicitly instrumented beforehand.&lt;/p&gt;&lt;p&gt;This is still, by far, the biggest reason that I have to attach Intellij and debug from there.&lt;/p&gt;&lt;p&gt;I'm not sure what the interface should be - hopefully something better than what edebug does, which is a bit awkward.&lt;/p&gt;&lt;h2&gt;Eval&lt;/h2&gt;&lt;p&gt;While stopped in the debugger, you can press &lt;code&gt;e&lt;/code&gt; for &lt;code&gt;eval&lt;/code&gt; (although it's not documented), but the resulting value is shown in an overlay, as if it was the value of the last expression.&lt;/p&gt;&lt;p&gt;You can work around this by evaluating &lt;code&gt;(prn thing)&lt;/code&gt; or &lt;code&gt;(pprint thing)&lt;/code&gt;, but it might be nice to have an &lt;code&gt;eval-and-pprint&lt;/code&gt; command.&lt;/p&gt;&lt;h2&gt;Overlays&lt;/h2&gt;&lt;p&gt;Overlays are used to show values. (TODO: rant about overlays). I would often rather have the values pretty-printed into a dedicated buffer, so that I can search, copy, yank, etc.&lt;/p&gt;&lt;h2&gt;Conditional Breakpoints&lt;/h2&gt;&lt;p&gt;I want conditional breakpoints!&lt;/p&gt;&lt;p&gt;Strawman:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;#break ^{:bp/condition (some expression)} (foo bar (baz))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I'm pretty sure that a reader literal only gets to operate on the single form that follows it, but I think attaching the condition as read-time metadata to the form would work.&lt;/p&gt;&lt;p&gt;Could also add a condition when instumenting a defn, perhaps with &lt;code&gt;C-u C-u C-M-x&lt;/code&gt;, then prompting for a the condition expression, which would be an expression of the arguments.&lt;/p&gt;&lt;h2&gt;Breakpoints List&lt;/h2&gt;&lt;p&gt;You can show a list of instumented functions, but it's very spartan. Should be able to jump to the function, uninstrument, etc.&lt;/p&gt;&lt;p&gt;It would also be nice to integrate this with the cider namespace browser (which itself could use some vast improvements!).&lt;/p&gt;&lt;h2&gt;Stacktrace&lt;/h2&gt;&lt;p&gt;There is now an &lt;code&gt;s&lt;/code&gt; command to show the current stacktrace. Yay!&lt;/p&gt;&lt;p&gt;It might be nice to highlight stack-frames that are instrumented, and to instrument or uninstrument functions directly from the stacktrace buffer.&lt;/p&gt;&lt;p&gt;The reason for this is that sometimes I am debugging and can see that the parameters passed to the instrumented function are not what I expected. I will want to re-run whatever I'm doing with some functions higher in the stack instrumented so I can figure out where things went wrong.&lt;/p&gt;&lt;h2&gt;Inspector&lt;/h2&gt;&lt;p&gt;The cider inspector is used to show locals while stopped in the debugger.&lt;/p&gt;&lt;p&gt;Expanding maps is tedious. It should expand maps and sequeneces inline, indented. More of a tree-like view.&lt;/p&gt;&lt;p&gt;I also want it to live-update as I step, and retain its expansion-state whenever possible.&lt;/p&gt;&lt;h2&gt;Break on Exceptions&lt;/h2&gt;&lt;p&gt;Another thing that I currently turn to Intellij for is "Break on Exception". I would love it if cider could do this.&lt;/p&gt;&lt;p&gt;I'm not quite sure how cider could implement this, given its approach of intrumenting functions one-at-a-time.&lt;/p&gt;&lt;p&gt;One option is to have an option for mass-instrumenation of functions, by walking through loaded namespaces. This could be combined with an option to instrument code in such a way that it stops in the debugger at the point where an exception is thrown. As in Intellij, you would probably want to break conditionally, based on the specific exception class.&lt;/p&gt;&lt;p&gt;Another, perhaps more ambitious option would be to also integrate an entirely different debugger, based on JPDA. There may some code to be scavenged from the old emacs clojure debugger project, which I can't quite remember the name of right now (Hugo Duncan made it).&lt;/p&gt;&lt;h2&gt;Thread&lt;/h2&gt;&lt;p&gt;I want multithreaded debugging.&lt;/p&gt;&lt;p&gt;Imagine being able to step through two functions, executing in parallel, in side-by-side emacs windows. You could play with various ways of manually interleaving execution orders to reveal threading bugs (yes, those do happen in clojure!), race conditions, etc.&lt;/p&gt;&lt;p&gt;At the moment, I don't think this works well, if at all, although I need to do some experiments to see how far off we are. There certainly appear to be some bookkeeping vars in cider-nrepl's debug namespace that are not multithread-aware.&lt;/p&gt;&lt;h2&gt;Macroexpansion&lt;/h2&gt;&lt;p&gt;It would be pretty cool to step through the macroexpanded version of a piece of code, expanded inline.&lt;/p&gt;&lt;h2&gt;Finding Your Place&lt;/h2&gt;&lt;p&gt;At the moment, it's easy to lose your debug session.&lt;/p&gt;&lt;p&gt;Sometimes while stopped at a breakpoint, I start meta-dotting my way around the code, reading some other functions, etc. Eventually, I want to continue my debugging session, but I can't remember which function or even which namespace the debugger is stopped in. I need a way to jump back to the code that I'm currently stopped in.&lt;/p&gt;&lt;h2&gt;Read Only&lt;/h2&gt;&lt;p&gt;I would prefer if files were always read-only while debugging. The fact that you can type any character you like except for &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, etc. (the debugger commands) is just weird.&lt;/p&gt;&lt;p&gt;Also, if I'm pounding on &lt;code&gt;n&lt;/code&gt; in rapid succession and hit a function that takes some time (eg: a database call), then I accidentally start typing n's into the code.&lt;/p&gt;</content></entry><entry><title>Test - This is Only a Test</title><updated>2016-01-23T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2016/01/23/test-post/" /><id>urn:pro-grammati-ca:feed:post:Test - This is Only a Test</id><content type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Donec hendrerit tempor tellus.  Donec pretium posuere tellus.  Proin quam nisl, tincidunt et, mattis eget, convallis nec, purus.  Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.  Nulla posuere.  Donec vitae dolor.  Nullam tristique diam non turpis.  Cras placerat accumsan nulla.  Nullam rutrum.  Nam vestibulum accumsan nisl.&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;Section&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Donec hendrerit tempor tellus.  Donec pretium posuere tellus.  Proin quam nisl, tincidunt et, mattis eget, convallis nec, purus.  Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.  Nulla posuere.  Donec vitae dolor.  Nullam tristique diam non turpis.  Cras placerat accumsan nulla.  Nullam rutrum.  Nam vestibulum accumsan nisl.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Donec posuere augue in quam.&lt;/li&gt;&lt;li&gt;Phasellus neque orci, porta a, aliquet quis, semper a, massa.&lt;/li&gt;&lt;li&gt;Nullam tempus.&lt;/li&gt;&lt;li&gt;Phasellus lacus.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Link to something &lt;a href="https://github.com/grammati"&gt;is here&lt;/a&gt;. Go there.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;SubSection&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Some code&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;(defn file-path [request path &amp;amp; {:as options}]
  (let [path (-&amp;gt;&amp;gt; request :optimus-assets
                  (filter #(= path (assets/original-path %)))
                  (remove :outdated)
                  (first))]
    (if path
      (full-path path)
      (if-let [fallback (:fallback options)]
        (file-path request fallback)))))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nullam eu ante vel est convallis dignissim.  Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio.  Nunc porta vulputate tellus.  Nunc rutrum turpis sed pede.  Sed bibendum.  Aliquam posuere.  Nunc aliquet, augue nec adipiscing interdum, lacus tellus malesuada massa, quis varius mi purus non odio.  Pellentesque condimentum, magna ut suscipit hendrerit, ipsum augue ornare nulla, non luctus diam neque sit amet urna.  Curabitur vulputate vestibulum lorem.  Fusce sagittis, libero non molestie mollis, magna orci ultrices dolor, at vulputate neque nulla lacinia eros.  Sed id ligula quis est convallis tempor.  Curabitur lacinia pulvinar nibh.  Nam a sapien.&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;Section&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Nullam eu ante vel est convallis dignissim.  Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio.  Nunc porta vulputate tellus.  Nunc rutrum turpis sed pede.  Sed bibendum.  Aliquam posuere.  Nunc aliquet, augue nec adipiscing interdum, lacus tellus malesuada massa, quis varius mi purus non odio.  Pellentesque condimentum, magna ut suscipit hendrerit, ipsum augue ornare nulla, non luctus diam neque sit amet urna.  Curabitur vulputate vestibulum lorem.  Fusce sagittis, libero non molestie mollis, magna orci ultrices dolor, at vulputate neque nulla lacinia eros.  Sed id ligula quis est convallis tempor.  Curabitur lacinia pulvinar nibh.  Nam a sapien.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Subsection&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Numbered list&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Donec hendrerit tempor tellus.  Donec pretium posuere tellus.  Proin quam nisl, tincidunt et, mattis eget, convallis nec, purus.  Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.  Nulla posuere.  Donec vitae dolor.  Nullam tristique diam non turpis.  Cras placerat accumsan nulla.  Nullam rutrum.  Nam vestibulum accumsan nisl.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Pellentesque dapibus suscipit ligula.  Donec posuere augue in quam.  Etiam vel tortor sodales tellus ultricies commodo.  Suspendisse potenti.  Aenean in sem ac leo mollis blandit.  Donec neque quam, dignissim in, mollis nec, sagittis eu, wisi.  Phasellus lacus.  Etiam laoreet quam sed arcu.  Phasellus at dui in ligula mollis ultricies.  Integer placerat tristique nisl.  Praesent augue.  Fusce commodo.  Vestibulum convallis, lorem a tempus semper, dui dui euismod elit, vitae placerat urna tortor vitae lacus.  Nullam libero mauris, consequat quis, varius et, dictum id, arcu.  Mauris mollis tincidunt felis.  Aliquam feugiat tellus ut neque.  Nulla facilisis, risus a rhoncus fermentum, tellus tellus lacinia purus, et dictum nunc justo sit amet elit.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Nullam eu ante vel est convallis dignissim.  Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio.  Nunc porta vulputate tellus.  Nunc rutrum turpis sed pede.  Sed bibendum.  Aliquam posuere.  Nunc aliquet, augue nec adipiscing interdum, lacus tellus malesuada massa, quis varius mi purus non odio.  Pellentesque condimentum, magna ut suscipit hendrerit, ipsum augue ornare nulla, non luctus diam neque sit amet urna.  Curabitur vulputate vestibulum lorem.  Fusce sagittis, libero non molestie mollis, magna orci ultrices dolor, at vulputate neque nulla lacinia eros.  Sed id ligula quis est convallis tempor.  Curabitur lacinia pulvinar nibh.  Nam a sapien.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</content></entry><entry><title>The One-Year-Old Earth</title><updated>2012-05-09T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2012/05/09/the-one-year-old-earth/" /><id>urn:pro-grammati-ca:feed:post:The One-Year-Old Earth</id><content type="html">&lt;p&gt;How old is the Earth? What is the scale of natural history?&lt;/p&gt;&lt;p&gt;Like many people, I find the numbers involved hard to visualize. The Earth formed about 4.6 billion years ago. That's a big number. Dinosaurs died out 65 million years ago. That's a big number too. Humans left Africa 70 thousand years ago. Smaller, but still a pretty big number.&lt;/p&gt;&lt;p&gt;Let's visualize Earth's history in a time scale that we all have an intuitive grasp of, from our own experience: one year. What follows is an extremely brief history of Earth, condensed into one year.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;January 1st - The Earth forms&lt;/li&gt;&lt;li&gt;Feb/March - First life appears somewhere in here&lt;/li&gt;&lt;li&gt;Late March - Photosynthesis evolves&lt;/li&gt;&lt;li&gt;Late June - Atmosphere is starting to oxygenate&lt;/li&gt;&lt;li&gt;Mid August -Eukaryotic cells&lt;/li&gt;&lt;li&gt;Late September - Multicellular life&lt;/li&gt;&lt;li&gt;Mid November - The Cambrian Explosion - many species evolve&lt;/li&gt;&lt;li&gt;Late November - Some species begin to move onto land&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;December&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;3rd - Carboniferous period - there are trees, tetrapods, insects, sharks.&lt;/li&gt;&lt;li&gt;8th - The supercontinent Pangaea forms.&lt;/li&gt;&lt;li&gt;14th - Dinosaurs! And mammals too.&lt;/li&gt;&lt;li&gt;17th - Pangaea breaks up.&lt;/li&gt;&lt;li&gt;26th (evening) - Dinosaurs go extinct.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;December 31st&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Noon(ish) - Last common ancestor of humans and chimpanzees.&lt;/li&gt;&lt;li&gt;7pm - Use of stone tools by Australopithecus.&lt;/li&gt;&lt;li&gt;11:37pm - Homo sapiens.&lt;/li&gt;&lt;li&gt;11:52pm - Humans migrate out of Africa.&lt;/li&gt;&lt;li&gt;11:57pm - Neanderthals die out.&lt;/li&gt;&lt;li&gt;11:58pm - Humans have reached South America, and now inhabit all continents.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Final Minutes (measured in seconds before midnight)&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;70 seconds - Agriculture develops in the middle east.&lt;/li&gt;&lt;li&gt;52-45 seconds - Sumerian civilization. Writing invented.&lt;/li&gt;&lt;li&gt;32 seconds - Pyramids built at Giza.&lt;/li&gt;&lt;li&gt;14 seconds - Roman empire under Julius Caesar.&lt;/li&gt;&lt;li&gt;5 seconds - The Renaissance.&lt;/li&gt;&lt;li&gt;4 seconds - Europeans colonize North America.&lt;/li&gt;&lt;li&gt;3 seconds - Newton, the Elizabethan era.&lt;/li&gt;&lt;li&gt;2 seconds - The Industrial Revolution.&lt;/li&gt;&lt;li&gt;1 second - Telephone, light bulb.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;At last, we arrive at midnight - the present day. Homo sapiens have existed for less than half an hour. All of recorded human civilization has happened in the last minute. You, and everyone now alive, was born within the last second. You very likely have less than half a second left to live. Make the most of it. &lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;</content></entry><entry><title>Boxes and Arrows</title><updated>2012-01-18T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2012/01/18/boxes-and-arrows/" /><id>urn:pro-grammati-ca:feed:post:Boxes and Arrows</id><content type="html">&lt;p&gt;When I was young and naive, I thought that software architecture was just drawing boxes and arrows and then deciding what's inside the boxes.&lt;br /&gt;&lt;br /&gt;Now that I'm older and wiser, I realize how wrong I was; software architecture is drawing boxes and arrows and then deciding what's inside the arrows.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content></entry><entry><title>The Obligatory New Year's Resolution Post</title><updated>2012-01-02T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2012/01/02/the-obligatory-new-years-resolution-post/" /><id>urn:pro-grammati-ca:feed:post:The Obligatory New Year's Resolution Post</id><content type="html">&lt;p&gt;&lt;br /&gt;My 2012 Resolutions, or "How I plan to change overnight and be a new and better person with zero effort, just by writing stuff down".&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Read less&lt;/li&gt;&lt;li&gt;Get less sleep&lt;/li&gt;&lt;li&gt;Drink more coffee&lt;/li&gt;&lt;li&gt;Drink more alcohol&lt;/li&gt;&lt;li&gt;Be more of an asshole&lt;/li&gt;&lt;li&gt;Be less organized&lt;/li&gt;&lt;li&gt;Put less effort into important work&lt;/li&gt;&lt;li&gt;Put more effort into trivial, unimportant work&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Read less: I spent too much time reading random crap on the internet, and articles and books about stuff I never end up using. I could spend that time &lt;i&gt;doing&lt;/i&gt; stuff instead of reading about it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Get less sleep: Life is short. I want to have time to do stuff, and sleep-time is pretty much the only part of my life that I am willing and able to give up. 6 hours is plenty, right?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Drink more coffee: Coffee is a natural and healthy alternative to sleep. Seriously, ask any scientist.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Drink more alcohol: There are just too many yummy varieties of whiskey to try, and so little time to try them all.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Be more of an asshole: I'm actually very nice to people. Nice people never get anywhere in life. The rest of the world needs to be made aware than, in general, I am right and they are wrong and they should be ashamed of that.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Be less organized: I put too much effort into writing down and sorting and categorizing things that I intend to do, but never actually do. Stop it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Put less effort into important work: My employer will continue to profit, regardless of the amount of effort I put in. I can afford to slack off a bit.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Put more effort into trivial, unimportant work: Looking back, I always get the most satisfaction out of things that started as off-the-cuff, just-for-fun side projects. Do more of those.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br class="Apple-interchange-newline" /&gt;&lt;/p&gt;</content></entry><entry><title>Making the World a Better Place through BDD</title><updated>2011-11-11T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2011/11/11/making-the-world-a-better-place-through-bdd/" /><id>urn:pro-grammati-ca:feed:post:Making the World a Better Place through BDD</id><content type="html">&lt;p&gt;How BDD makes everything better:&lt;/p&gt;&lt;p&gt;Before:&lt;/p&gt;&lt;pre&gt;&lt;code class="java"&gt;class UnitTest extends TestCase {
    void testStuff() {
        assertEqual(&amp;quot;hello&amp;quot;, 
                    HugeBloatedIncomprehensibleClassFactory
                      .newInstanceOfHugeBloatedIncomprehensibleClass()
                      .complexFragileUndocumentedSideEffectingMethod());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After:&lt;/p&gt;&lt;pre&gt;&lt;code class="java"&gt;class BDDTest {
    private String greeting;

    @BeforeSpecification 
    void setUp() {
        greeting = HugeBloatedIncomprehensibleClassFactory
                     .newInstanceOfHugeBloatedIncomprehensibleClass()
                     .complexFragileUndocumentedSideEffectingMethod());
    }

    @Specification 
    void mustBeHello() {
        expect.that(value).isEqualTo(&amp;quot;hello&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Rejoice! Our problems are solved!&lt;/p&gt;</content></entry><entry><title>My First C Program</title><updated>2011-10-31T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2011/10/31/my-first-c-program/" /><id>urn:pro-grammati-ca:feed:post:My First C Program</id><content type="html">&lt;p&gt;My first C program was somewhat of a revelation for me - enough that I still remember the afternoon that I wrote it, more than a decade later.&lt;br /&gt;&lt;br /&gt;With some JavaScript, Visual Basic, Python, and Java under my belt, I set out to learn C++; after all, that is what &lt;i&gt;real&lt;/i&gt; programs are written in, right?&lt;br /&gt;&lt;br /&gt;I had been studying algorithms as well, to fill the gaps in my self-taught computer-science knowledge, and one afternoon I decided to see if I could whip up an in-place quicksort in C, from memory.&lt;br /&gt;&lt;br /&gt;Working in Notepad, I made a little main program and compiled it from the command line. I don't remember which compiler I was using - this was on Windows. The program just did this:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Read an integer command-line argument - the array size&lt;/li&gt;&lt;li&gt;Allocate an int-array of the given size&lt;/li&gt;&lt;li&gt;Fill the array with random integers&lt;/li&gt;&lt;li&gt;Sort the array, in-place&lt;/li&gt;&lt;li&gt;Loop through the array to check that is really is sorted&lt;/li&gt;&lt;li&gt;Print out "OK", or something like that.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;After a few minor hiccups, I was delighted when the program compiled, and my first run, with a short array (100 elements, maybe - I don't remember), sorted correctly.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;But I was suspicious - "OK" was being printed, but was it &lt;i&gt;really&lt;/i&gt; working? I examined the code carefully, and managed to convince myself that it could not possibly print OK unless the array really was sorted. So I started trying larger inputs.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;1000. No problem. Running my program from the command-line, there was no perceptible delay between hitting Return, and "OK" being printed out.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;10000. Same thing.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;100K. Then a million. Then I &lt;i&gt;know&lt;/i&gt; something is very wrong. The program is simply printing out "OK" immediately. There should be a pause while it works, before the result is printed. It cannot possibly be sorting a million integers more-or-less instantly.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I examine the code again, with a fine-tooth comb, looking for any possible way that it could be just jumping to the end. But the code is simple and clear - I can't see any way that it could possibly not be working. This is getting frustrating.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Finally I decide to crank it up one more notch, just to be really, really sure. Ten million integers. I type in the command and press return. Again, it prints "OK" - but this time there is an ever-so- brief delay.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And in that moment - in that brief, sub-second moment before "OK" appears on my screen - everything changes. In that tiny pause, I am bowled over by the realization of just how fast - how astoundingly, mind-bendingly fast - modern computers are. I really can sort a million integers faster than I can blink.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A whole world of possibilities opened up for me in that instant. Until that moment I had been wrapped in the safe warm layers of interpreters and runtimes and frameworks. Because of that, I had never really had a feel for just how fast the hardware underneath could be. It took the bare-metal power of C to reveal that to me.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/p&gt;</content></entry><entry><title>Learning PHP</title><updated>2011-08-15T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2011/08/15/learning-php/" /><id>urn:pro-grammati-ca:feed:post:Learning PHP</id><content type="html">&lt;p&gt;Day 1 of my quest to become a more well-rounded web-developer - PHP.&lt;br /&gt;&lt;br /&gt;It turns that out just getting up and running was actually harder than it was with Rails, which sort-of defeats some of the appeal of PHP. But it was actually an Apache problem.&lt;br /&gt;&lt;br /&gt;Here's what happened.&lt;br /&gt;&lt;br /&gt;Step 1: &lt;span class="Apple-style-span" style="font-family: courier, monospace; font-size: 15px; white-space: pre-wrap;"&gt;sudo apt-get install apache2 php5-mysql libapache2-mod-php5 mysql-server&lt;/span&gt;&lt;br /&gt;&lt;span class="Apple-style-span" style="font-size: 15px; white-space: pre-wrap;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style="font-family: 'Times New Roman'; font-size: medium; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; white-space: normal;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="font-size: medium; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; white-space: normal;"&gt;&lt;span class="Apple-style-span" style="font-family: 'Times New Roman';"&gt;Really, that should be it. But it didn't quite work. Once I figured out where my apache document root was, and created a little PHP test-file (&lt;/span&gt;&lt;span class="Apple-style-span" style="font-family: 'Courier New', Courier, monospace;"&gt;&lt;!--?php phpinfo(); ?--&gt;&lt;/span&gt;), the browser just kept downloading it.&lt;/div&gt;&lt;div style="font-family: 'Times New Roman'; font-size: medium; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; white-space: normal;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="font-family: 'Times New Roman'; font-size: medium; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; white-space: normal;"&gt;I checked all the right things - made sure the php5 module was enabled, loaded, etc. No love.&lt;/div&gt;&lt;div style="font-family: 'Times New Roman'; font-size: medium; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; white-space: normal;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="font-size: medium; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; white-space: normal;"&gt;&lt;span class="Apple-style-span" style="font-family: 'Times New Roman';"&gt;Finally, I guessed that the problem might stem from this message, which comes up when I restart apache (&lt;/span&gt;&lt;span class="Apple-style-span" style="font-family: 'Courier New', Courier, monospace;"&gt;sudo service apache2 restart&lt;/span&gt;):&lt;/div&gt;&lt;div style="font-size: medium; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; white-space: normal;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"&gt;&lt;/div&gt;&lt;blockquote&gt;Could not reliably determine the server's fully qualified domain name, using 127.0.1.1 for ServerName&lt;/blockquote&gt;&lt;div style="font-size: medium; white-space: normal;"&gt;It took me a while to notice that it was saying "127.0.1.1", and not "127.0.0.1", as I had assumed. Some day I'll have to learn enough about IP to understand what the difference is. For now, if I just type 127.0.1.1 into the browser instead of "localhost", PHP works. Good enough for day 1.&lt;/div&gt;&lt;div style="font-size: medium; white-space: normal;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="font-family: 'Times New Roman'; font-size: medium; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; white-space: normal;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;/p&gt;</content></entry><entry><title>Building Emacs 24</title><updated>2011-07-21T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2011/07/21/building-emacs-24/" /><id>urn:pro-grammati-ca:feed:post:Building Emacs 24</id><content type="html">&lt;p&gt;Emacs 24 is not released, but building it is not so hard.&lt;/p&gt;&lt;p&gt;Here's what I did, on Ubuntu 11.04.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;git clone git://github.com/emacsmirror/emacs.git&lt;/b&gt;&lt;br /&gt;This takes a while - it's big.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The INSTALL file says to run configure, but there ain't no such thing. After some head-scratching, I figure out that I have to run &lt;b&gt;autogen.sh&lt;/b&gt; to create it.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;run &lt;b&gt;./configure&lt;/b&gt; - attempt #1&lt;br /&gt;&lt;blockquote&gt;checking for makeinfo... no&lt;br /&gt;configure: error: You do not seem to have makeinfo &gt;= 4.6, and your&lt;br /&gt;source tree does not seem to have pre-built manuals in the 'info' directory.&lt;br /&gt;Either install a suitable version of makeinfo, or re-run configure&lt;br /&gt;with the `--without-makeinfo' option to build without the manuals.&lt;/blockquote&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The obvious solution: "sudo apt-get install makeinfo" doesn't work. Google reveals that you actually need "&lt;b&gt;sudo apt-get install texinfo&lt;/b&gt;".&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;4) &lt;b&gt;./configure&lt;/b&gt; - attempt #2&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;blockquote&gt;checking for xaw3d... no&lt;br /&gt;checking for libXaw... configure: error: No X toolkit could be found.&lt;br
/&gt;If you are sure you want Emacs compiled without an X toolkit, pass&lt;br /&gt;  --with-x-toolkit=no&lt;br /&gt;to configure.  Otherwise, install the development libraries for the toolkit&lt;br /&gt;that you want to use (e.g. Gtk+) and re-run configure.&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Well, I want to use Gtk, so by a process of wild guesswork I figure out that "&lt;b&gt;sudo apt-get install libgtk2.0-dev&lt;/b&gt;" is the right incantation.&lt;/div&gt;&lt;div&gt;&lt;br
/&gt;&lt;/div&gt;&lt;div&gt;5) &lt;b&gt;./configure&lt;/b&gt; - attempt #3&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;blockquote&gt;checking for gif_lib.h... no&lt;br /&gt;configure:
error: The following required libraries were not found:&lt;br /&gt;&amp;nbsp; &amp;nbsp;
libXpm libjpeg libgif/libungif libtiff&lt;br /&gt;Maybe some development
libraries/packages are missing?&lt;br /&gt;If you don't want to link with them give&lt;br
/&gt;&amp;nbsp; &amp;nbsp; --with-xpm=no --with-jpeg=no --with-gif=no --with-tiff=no&lt;br
/&gt;as options to configure&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Hmm, I don't really use
emacs to view images, but I would rather build a fully functional version, so...
"&lt;b&gt;sudo apt-get install libxpm-dev libjpeg-dev libgif-dev libtiff4-dev&lt;/b&gt;".
Where would society be without tab-completion of package names? It would be
anarchy, I tell you.&lt;ol start="6"&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;./configure&lt;/b&gt; - attempt #4. Yay, victory!&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;make&lt;/b&gt;&lt;br /&gt;This takes a while too.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;sudo make install&lt;/b&gt;&lt;br /&gt;This is pretty quick.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;At this point, I congratulate myself for getting this far without reading more than a paragraph or so of instructions. That's the way real men do it. But unfortunately, I'm now lost - I don't know where my shiny new emacs is, or how I make it my default. I'll have to break down and do some research.&lt;/p&gt;&lt;p&gt;Scanning Makefile I find "prefix=/usr/local", and sure enough, there is a /usr/local/bin/emacs-24.0.50, and it works.&lt;/p&gt;&lt;p&gt;I don't know much about update-alternatives, but after some poking around I manage:&lt;br /&gt;&lt;b&gt;sudo update-alternatives --install /usr/bin/emacs emacs /usr/local/bin/emacs-24.0.50 2&lt;/b&gt;&lt;br /&gt;That last "2" is a priority, but I didn't have any idea what number to pick. I found out afterwards that emacs 23 has a priority of 26. Huh? Whatever, doesn't matter. I do "&lt;b&gt;sudo update-alternatives --config emacs&lt;/b&gt;", and pick the shiny new emacs-24. Now typing "emacs" at the commandline gives me the new hotness. Yay for me.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content></entry><entry><title>Murray</title><updated>2011-07-19T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2011/07/19/murray/" /><id>urn:pro-grammati-ca:feed:post:Murray</id><content type="html">&lt;p&gt;6:30. It's a morning like any other - coffee, toast, getting ready for the day. Murray stretches sleepily on the couch and lifts his head to look at me. I rub his head and tell him he's a good boy. Just another morning, like any other. Just another day. Right, Murray? Just another day. I step out onto the back deck with my coffee and try to hold back tears.&lt;br /&gt;&lt;br /&gt;Time passes too quickly. Eight o-clock is coming too fast. I eat, shower, the babysitter arrives, and it's time to walk out the door. We tell the kids to come over and give Murray a hug. But they're too young to understand why. Thankfully, too young to understand why.&lt;br /&gt;&lt;br /&gt;It's a walk like any other morning, like every other morning - sniff, pee, sniff some more. No hurry. Nothing out of the ordinary. Just another day, right Murray? Just another day. As Murray explores in the long grass, Tracy drives past us in the car, watching. I see can my thoughts reflected in her face.&lt;br /&gt;&lt;br /&gt;"Come on, Murray", I say, as he lags behind, chewing on some blades of grass. It's 7:56. We don't have much time. But it doesn't feel right, telling him to hurry - he has no idea what he's hurrying towards.&lt;br /&gt;&lt;br /&gt;Today, we walk just a little bit further than usual. Past the gas station, around the corner to the strip mall. This is different. This isn't where we normally go for our walks.&lt;br /&gt;&lt;br /&gt;We see someone standing on the sidewalk. As Murray gets closer, he realizes that it's Tracy, and he drags me the last few steps to greet her. What an exciting surprise - Mom's here. She's still holding it together. Not me - with each step closer to the door, I'm falling apart.&lt;br /&gt;&lt;br /&gt;We compose ourselves for a minute and then go inside. The employees smile and greet Murray by name. They all know why we're here. We go straight into "the room". I had no idea they would have a special room for this. It's all set up with a comfy dog-bed and a jar of liver-treats for Murray, and a box of Kleenex for us.&lt;br /&gt;&lt;br /&gt;Everything starts to go too fast. They take him to put the catheter in his leg, where the needle will go in, and then he's back. We're stuffing him with liver-treats, and he's so excited. He never gets liver because it gives him the runs. Doesn't matter now.&lt;br /&gt;&lt;br /&gt;The vet comes back in holding a needle. Seeing it, full of bright green liquid, suddenly makes all this just a little bit more real to me. It's really happening. No-one is going to say "Oops, our mistake, turns out it's not cancer at all. Here are some pills that will make him all better."  No-one is going to say "He's not that bad yet - come back in a few weeks."&lt;br /&gt;&lt;br /&gt;Part of me wants to say "Wait - he's still happy - it's not time yet." But I know that's not true. I know it's time. I can see into his mouth, and one of the treats is stuck in there, unable to get past the baseball-sized tumor that has almost closed his throat, leaving little more than a slit for him to breathe through.&lt;br /&gt;&lt;br /&gt;We calm him down and sit on the floor on either side of him, talking to him and stroking his head as the needle goes in. It only takes seconds. His head droops in my arms, and I lay him down gently on the floor. That's it. It's over. We stay for ten minutes or so, feeling the softness of his fur for the last time, looking at his peaceful face, trying to take a mental snapshot that will last a lifetime. Then we walk out and go home.&lt;br /&gt;&lt;br /&gt;Back in the house, the chaos of everyday life takes over. The kids are running around screaming, as usual. There are dishes to be done. It's a workday. After a little while, I sit down at the computer and try to get some work done. Tracy takes the kids out in the backyard to play. It's just another day - a day like any other, right Murray? Just another day.&lt;br /&gt;&lt;br /&gt;But after today, none of our days will ever be the same again.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-Nk-T4V4eH9g/SOqVH6afC3I/AAAAAAAAAFM/PYxAR13DQPE/s1600/DSC03699.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="http://4.bp.blogspot.com/-Nk-T4V4eH9g/SOqVH6afC3I/AAAAAAAAAFM/PYxAR13DQPE/s320/DSC03699.JPG" width="214" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/p&gt;</content></entry><entry><title>Clojure Does Not Have Variables</title><updated>2011-04-18T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2011/04/18/clojure-does-not-have-variables/" /><id>urn:pro-grammati-ca:feed:post:Clojure Does Not Have Variables</id><content type="html">&lt;p&gt;Clojure, like many functional languages, does not have "variables".  It has "bindings", but they cannot vary - there is no concept of reassignment.  But what does that really mean?&lt;br /&gt;&lt;br /&gt;When you see code like this:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;(let [x (something)&lt;br /&gt;      y (blah x)&lt;br /&gt;      x (more (stuff x) y)]&lt;br /&gt;  (whatever x))&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;you may very well think "you are re-binding x - that's the same thing as a variable, for all intents and purposes". And I agree that it looks that way. But it's not.&lt;br /&gt;&lt;br /&gt;Here's the difference:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;# python&lt;br /&gt;def foo():&lt;br /&gt;    x = 23&lt;br /&gt;    y = lambda: x&lt;br /&gt;    x = 44&lt;br /&gt;    return y&lt;br /&gt;&lt;br /&gt;print foo()()&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;pre&gt;# ruby&lt;br /&gt;def foo():&lt;br /&gt;    x = 23&lt;br /&gt;    y = lambda { x }&lt;br /&gt;    x = 44&lt;br /&gt;    y&lt;br /&gt;&lt;br /&gt;puts foo.call&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;pre&gt;// javascript&lt;br /&gt;var foo = function(){&lt;br /&gt;    var x = 23;&lt;br /&gt;    var y = function(){ return x; }&lt;br /&gt;    x = 44;&lt;br /&gt;    return y;&lt;br /&gt;};&lt;br /&gt;alert( foo()() );&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;pre&gt;; clojure&lt;br /&gt;(defn foo []&lt;br /&gt;  (let [x 23&lt;br /&gt;        y (fn [] x)&lt;br /&gt;        x 44]&lt;br /&gt;    y))&lt;br /&gt;&lt;br /&gt;(println ((foo)))&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;One of these things is not like the others... one of these things is not the same. (I can't remember which childhood TV show that's from).&lt;br /&gt;&lt;br /&gt;Three of the snippets above print 44. The other prints 23. That may not seem very significant, but it is. Immutability runs deeper than just unmodifiable vectors and maps.&lt;/p&gt;</content></entry><entry><title>I Hate the New Kindle</title><updated>2011-03-12T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2011/03/12/i-hate-the-new-kindle/" /><id>urn:pro-grammati-ca:feed:post:I Hate the New Kindle</id><content type="html">&lt;p&gt;Why?  Well you know all that marketing hype about the new kindle having "better contrast" and "higher resolution"? It's probably just BS, right? No!!!  My wife just got a Kindle, and the screen &lt;i&gt;looks so much&lt;/i&gt; better, it's obnoxious! It looks &lt;i&gt;way&lt;/i&gt; better than mine.  It's just not fair.  I had it first! Hers shouldn't be better. She cheated..&lt;/p&gt;</content></entry><entry><title>I Am a Zsh Ninja</title><updated>2011-03-12T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2011/03/12/i-am-a-zsh-ninja/" /><id>urn:pro-grammati-ca:feed:post:I Am a Zsh Ninja</id><content type="html">&lt;p&gt;OK, not really. Not even close.&lt;br /&gt;&lt;br /&gt;But like a lot of programmers, I get ridiculously obsessed with making things work exactly the way I want them to.  This morning I wanted to put all the jars in a certain folder on my CLASSPATH. Unfortunately, my java (openJDK) doesn't seem to recognize wildcards in the classpath - eg: "/whatever/&lt;em&gt;.jar" does not work. So I thought "no problem - with a bit of commandline-fu, I can expand that wildcard". Except I have no commandline-fu. Nevertheless, I found myself compelled to figure out how to do it, ignoring the 500 other, more productive things I could be doing. 40 minutes later:&lt;br /&gt;&lt;br /&gt;&lt;span class="Apple-style-span" style="font-family: 'Courier New', Courier, monospace;"&gt;    export CLASSPATH=$(echo ~/.clojure/lib/dev/&lt;/em&gt;.jar | ruby -e "puts STDIN.read.gsub(/ /,':')")&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Yippee!  I'm sure there's a shorter way to do that, and I'm sure a lot people could have done it in about 3 seconds, but for me it's a victory.&lt;br /&gt;&lt;br /&gt;By the way, I don't recommend trying to learn awk by typing "man awk" - trust me, I tried that, and I got nowhere.&lt;/p&gt;</content></entry><entry><title>Paredit Sucks - Or Does It?</title><updated>2011-03-08T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2011/03/08/paredit-sucks---or-does-it/" /><id>urn:pro-grammati-ca:feed:post:Paredit Sucks - Or Does It?</id><content type="html">&lt;p&gt;Somehow, gradually, over the course of a month or so of forcing myself to use paredit mode for writing clojure, it quietly stopped sucking. I'm almost starting to actually like it. Amazing.&lt;/p&gt;</content></entry><entry><title>SICP</title><updated>2011-03-07T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2011/03/07/sicp/" /><id>urn:pro-grammati-ca:feed:post:SICP</id><content type="html">&lt;p&gt;I have finally been reading SICP (after foolishly avoiding it for years), and I'm pretty blown away. I just got to section 1.3 (10% of the way into it), and it's talking about higher-order functions! This is the first chapter of a textbook for first-year undergraduates. I'm pretty sure that I know programmers with 20 years of experience who have never heard of higher-order functions.&lt;/p&gt;</content></entry><entry><title>The Trouble with JavaScript</title><updated>2010-10-21T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2010/10/21/the-trouble-with-javascript/" /><id>urn:pro-grammati-ca:feed:post:The Trouble with JavaScript</id><content type="html">&lt;p&gt;Having done a lot of programming in JavaScript over the last few years, I have come up with a very simple procedure for figuring out what's wrong whenever your code doesn't work as expected. There are only two steps.&lt;br /&gt;&lt;br /&gt;1) Does it work fine in FireFox, but fail to do anything at all in I.E.? If yes: you have an extra trailing comma somewhere. Find it and get rid of it. Otherwise go to step 2. &lt;br /&gt;&lt;br /&gt;2) "this" doesn't mean what you think it does. Look carefully at all uses of "this" in the code you just wrote. There is somewhere that it really means "window".&lt;br /&gt;&lt;br /&gt;That's all. Pretty simple, isn't it?&lt;br /&gt;&lt;br /&gt;OK, seriously, there are a few more things that can be wrong in JavaScript code - but in practice, this procedure will correctly diagnose 95% of all coding errors.&lt;br /&gt;&lt;br /&gt;More practically, I would like to suggest a way that text editors could greatly reduce the incidence of the "this" error. All they have to do is highlight a little better. Here's a before and after:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/_gUHj_1QPwWM/TMCnfcwHSUI/AAAAAAAAAOk/n2NwAGMQnIk/s1600/rainbowthis.PNG" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://4.bp.blogspot.com/_gUHj_1QPwWM/TMCnfcwHSUI/AAAAAAAAAOk/n2NwAGMQnIk/s1600/rainbowthis.PNG" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Get it? The green "this" ain't necessarily the same thing as the red "this". Having them look different would, I hope, get programmers to pay a little more attention to what "this" really means in each new scope.&lt;br /&gt;&lt;br /&gt;I wonder if any editors already do this?&lt;/p&gt;</content></entry><entry><title>Software... Engineering?</title><updated>2010-09-27T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2010/09/27/software-engineering/" /><id>urn:pro-grammati-ca:feed:post:Software... Engineering?</id><content type="html">&lt;p&gt;If all engineers worked the way "software engineers" do...&lt;br /&gt;&lt;br /&gt;Al: OK guys, we need to build a bridge across this river. The roads are ready on each side, we just need the bridge now. It has to have two lanes, and support vehicles up to 12 tons. Let's make a plan.&lt;br /&gt;&lt;br /&gt;Bill: That's easy - just give me a hammer and a box of nails. I'll be done in two weeks if everyone stays out of my way.&lt;br /&gt;&lt;br /&gt;Carl: No, no, we need to start by engaging the customer and starting to flesh out the user stories.&lt;br /&gt;&lt;br /&gt;Bill: Here's a story for you: "Old lady drives into river because dumbass engineer took too long to build a bridge".&lt;br /&gt;&lt;br /&gt;Doug: No, we should start by defining a set of well-defined interfaces between the components of the bridge - the frame-to-road-surface interface, the road-to-car interface...  Then we should look at building some factories for each of those components - abstract factories, actually.  Then when someone wants to drive across, they just have to sign the contract stating that they will conform to the vehicle-side interface contract...&lt;br /&gt;&lt;br /&gt;Eric: Forget all that enterprise bridge-building crap - that's so last year. There's this cool new open-source bridge-building framework that makes the whole thing out of bamboo and twine in less than a minute. It's so cool. Apparently its strength is unproven on bridges over 12 inches in length, but I'm sure it will work out...&lt;br /&gt;&lt;br /&gt;Al: Ok, ok, it sounds like we've got some ideas flowing. I'll let you guys get to it.&lt;br /&gt;&lt;br /&gt;6 Months Later&lt;br /&gt;&lt;br /&gt;Al: What the hell is going on with this bridge? We were supposed to be done in two months.&lt;br /&gt;&lt;br /&gt;Eric: My part is done! The western half of the support structure was done last month, and the bamboo is holding up nicely. It hasn't fallen down again in weeks now.&lt;br /&gt;&lt;br /&gt;Bill: My part is pretty much done...&lt;br /&gt;&lt;br /&gt;Al: Pretty much done? You said it would take two weeks, remember that?&lt;br /&gt;&lt;br /&gt;Bill: Yeah, but I had to change the plans and use metal instead of wood, and it took me a while to perfect my alloy...&lt;br /&gt;&lt;br /&gt;Al: Your alloy?!?&lt;br /&gt;&lt;br /&gt;Bill: Yes, it's custom made just for this bridge. But it's taking a while to retool my steel mill.&lt;br /&gt;&lt;br /&gt;Al: You built your own steel mill? What the hell?&lt;br /&gt;&lt;br /&gt;Bill: Of course. It also takes time to ship the ore from my mine...&lt;br /&gt;&lt;br /&gt;Al: (shaking head) And what's up with the road surface? It looks like it's made of two-by fours.&lt;br /&gt;&lt;br /&gt;Doug: Yes, but that's just the default road surface that you get out-of-the-box. You can configure that arbitrarily at drive-time by injecting an appropriate implementation of the road-to-frame interface into the bridge configuration...&lt;br /&gt;&lt;br /&gt;Al: And the railings? Why aren't they done?&lt;br /&gt;&lt;br /&gt;Carl: There was insufficient evidence from the user-stories I collected over the last 5 months to support the effort required, so we de-scoped them.&lt;br /&gt;&lt;br /&gt;Al: (sigh) Is there anything else I should know?&lt;br /&gt;&lt;br /&gt;Eric: Well, I'm not too happy with the test coverage...&lt;br /&gt;&lt;br /&gt;Al: I have an idea for testing. You four get in a dumptruck and drive across. I'll wait here.&lt;/p&gt;</content></entry><entry><title>My Problem with Monads</title><updated>2010-08-13T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2010/08/13/my-problem-with-monads/" /><id>urn:pro-grammati-ca:feed:post:My Problem with Monads</id><content type="html">&lt;p&gt;From time to time I will read something about monads, but so far I have utterly failed to understand them. In classic internet fashion, I am going to blame everyone else for my lack of comprehension. So here's my problem with monads: there seem to be plenty of tutorials out there that are able to define a monad as "a thing with a bind function and a return function and blah blah blah state blah blah blah representation of computation blah blah blah", but there seem to be few to none capable of answering the all-important follow-up question: "So what?".&lt;/p&gt;</content></entry><entry><title>You know he's a web developer when...</title><updated>2010-07-08T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2010/07/08/you-know-hes-a-web-developer-when/" /><id>urn:pro-grammati-ca:feed:post:You know he's a web developer when...</id><content type="html">&lt;p&gt;Today I wanted to subscribe to http://blog.ianbicking.org/ in Google Reader, but I couldn't find the "Subscribe" buttons that I normally rely on. So I just added "/rss" to the end of the URL, and it worked! Nice.&lt;/p&gt;</content></entry><entry><title>Selling GPL'd Software</title><updated>2009-07-14T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2009/07/14/selling-gpld-software/" /><id>urn:pro-grammati-ca:feed:post:Selling GPL'd Software</id><content type="html">&lt;p&gt;Zed said stuff:&lt;br /&gt;&lt;br /&gt;&lt;a href="http://zedshaw.com/blog/2009-07-13.html"&gt;http://zedshaw.com/blog/2009-07-13.html&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Right-on, brother!&lt;br /&gt;&lt;br /&gt;The problem he doesn't mention is that in any reasonably large corporation, the red tape involved in getting your boss's boss's manager's cost-center's accounts-payable department to buy software from "some dude in his parents' basement" (yes, that's how they see it) is prohibitive. Seriously, it would take fewer man-months to write it yourself (and would be much more fun). So it just doesn't happen.&lt;br /&gt;&lt;br /&gt;What we need is a big, fat, GPL-software aggregator organization that sells five thousand different small-ish bits of software on behalf of people like Zed, but has the clout of a real vendor. Does this exist? Should it?&lt;/p&gt;</content></entry><entry><title>Clojure, Day 2</title><updated>2009-06-10T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2009/06/10/clojure-day-2/" /><id>urn:pro-grammati-ca:feed:post:Clojure, Day 2</id><content type="html">&lt;p&gt;Holy crap dude, clojure going to be a problem for me! This is only my second day playing with it, and I think I'm getting hooked. I find myself giggling like an idiot as I type things into the REPL and then say "WTF? That actually worked?". I don't think I've had this much fun with a language since I learned Python almost a decade ago.&lt;/p&gt;&lt;p&gt;As a part of the task I set for myself, I wanted to do something like Python's str.rpartition, but for an arbitrary sequence. It should take a sequence and a predicate, and return a 3-tuple (ok, I still speak Python) of (left, item, right), where item is the last item matching the predicate, and left and right are sequences of the parts before and after it. For example:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;(prn (rpartition [1 2 3 4 5] #{3 4})) -&amp;gt; [(1 2 3) 4 (5)]
(prn (rpartition [1 2 3 4 5] #{4 2})) -&amp;gt; [(1 2 3) 4 (5)]
(prn (rpartition [1 2 3 4 5] #{1})) -&amp;gt; [() 1 (2 3 4 5)]
(prn (rpartition [1 2 3 4 5] #{})) -&amp;gt; [() nil (1 2 3 4 5)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At first I was trying to do things like finding the index of matching items - but I was vaguely uneasy about that, as it seemed rather non-functional. Then I tried a solution that assumed that (seq coll) returns a stateful iterator (it doesn't, but there may be another function that does - if so I don't know what it is yet). I finally zeroed in on something that works, in about 7 or 8 lines of code, and then I started to clean it up. It ended up like this:&lt;/p&gt;&lt;pre&gt;&lt;code class="clojure"&gt;(defn rpartition [coll pred]
  (let [[right [split &amp;amp;amp; left]] (split-with (complement pred) (reverse coll))]
    [(reverse left) split (reverse right)]))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Coolnesses to note:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The nested "assignment" in the let. I tried the "&amp; left" part on a whim, and by god it worked! Way cool.&lt;/li&gt;&lt;li&gt;I assumed that giving an empty sequence to "[split &amp; left]" would be an error and that I would have to add handling for that edge case. In fact it gives me nil and () respectively. It just "does the right thing". Wicked cool.&lt;/li&gt;&lt;li&gt;Note in the examples that my predicates are just set literals. "Calling" a set is effectively a membership test. You can't get any simpler than that. Mega cool.&lt;/li&gt;&lt;li&gt;Next step: learn how to abuse macros, as a prerequisite to learning how to not abuse macros.&lt;/li&gt;&lt;/ul&gt;</content></entry><entry><title>Reading stderr in Ruby and Python</title><updated>2009-06-02T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2009/06/02/reading-stderr-in-ruby-and-python/" /><id>urn:pro-grammati-ca:feed:post:Reading stderr in Ruby and Python</id><content type="html">&lt;p&gt;When I learned Ruby, one of the things that immediately struck me was how much easier it is than Python for doing simple, shell-scripting, sys-admin-y type tasks.  I was in love with backticks - running a shell command just seemed soooo much easier than fiddling around with Python's arcane subprocess module, which I never really liked. But I always had the slightly uneasy feeling that Ruby was probably just making the simple, 80% case easy. Today, that was confirmed.&lt;br /&gt;&lt;br /&gt;The command I want to run today is &lt;code&gt;p4 opened&lt;/code&gt;.  The problem is that if I am not logged in to Perforce, the command returns nothing in stdout, but prints an error message to stderr. I want to capture the message.  "No problem," I thought.  "I'm just hitting the 20% case for the first time."  So off I go to look up Kernel.open, and Kernel.system, and IO.popen, Open3.popen3, etc...&lt;br /&gt;&lt;br /&gt;Let's jump to the punchline: guess how you read the stderr of a subprocess in Ruby on Windows?  Drumroll...  You can't!  No, really, I'm not kidding.  You actually cannot do it.  WTF?&lt;br /&gt;&lt;br /&gt;So, back to trusty old Python:&lt;br /&gt;&lt;br /&gt;from subprocess import Popen, PIPE&lt;br /&gt;p = subprocess.Popen(['p4', 'opened'], stdout=PIPE, stderr=PIPE)&lt;br /&gt;out= p.stdout.read()&lt;br /&gt;err = p.stderr.read()&lt;br /&gt;&lt;br /&gt;Hmm, good old subprocess sure doesn't look so ugly to me anymore. It may not have the cool-factor of backticks, but dammit, it works!  That counts for a hell of a lot.&lt;/p&gt;</content></entry><entry><title>Untoaster?</title><updated>2009-05-30T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2009/05/30/untoaster/" /><id>urn:pro-grammati-ca:feed:post:Untoaster?</id><content type="html">&lt;p&gt;Today I left my toast down for too long, so I put it in the freezer, but it didn't turn back into bread. Why?&lt;/p&gt;</content></entry><entry><title>Setuptools Sucks!</title><updated>2007-04-06T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2007/04/06/setuptools-sucks/" /><id>urn:pro-grammati-ca:feed:post:Setuptools Sucks!</id><content type="html">&lt;p&gt;I really need to rant about how much setuptools sucks.  It's amazing that a single tool has the power to make all my development grind to a halt.  If you are the author of a Python library, I'm begging you not to rely on setuptools - at least not until it gets fixed.  Here's what's wrong with it:&lt;br /&gt;&lt;br /&gt;1) Every time I use it, it complains that it needs to be updated.  Come on - are you seriously telling me that copying a few files around absolutely requires v.0.6c5, and that v.0.6c3 is just not up to the task?  Give me a break.&lt;br /&gt;2) It can't update itself.  easy_install setuptools fails.&lt;br /&gt;3) Following 2), I of course need to go and find a downloadable version of setuptools.  But there doesn't seem to be any such thing.  There is just ez_setup, which does what setuptools itself does, which is to go to cheeseshop.python.org to get the files it needs.  Which leads me to the next point:&lt;br /&gt;4) cheeseshop.python.org is down!  And when it's down, the Python universe grinds to a halt.  So when I need to install something, I have to do it the old fashioned way - I go and download a zip file, unpack it, and run setup.py install... which takes us back to point 1).   AAAAAAARRRRHHHH!!!!!!!&lt;br /&gt;&lt;br /&gt;I think I'll just go and drink beer for the rest of the afternoon instead of writing code.  Setuptools, you win.  You sapped my will to live.  Congratulations.&lt;/p&gt;</content></entry><entry><title>Spellcheck</title><updated>2007-03-02T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2007/03/02/spellcheck/" /><id>urn:pro-grammati-ca:feed:post:Spellcheck</id><content type="html">&lt;p&gt;MS Word tells me that "&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_0"&gt;templating&lt;/span&gt;" (as in "we will use &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_1"&gt;Mako&lt;/span&gt; for &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_2"&gt;templating&lt;/span&gt;") is not a word, and suggests "&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_3"&gt;tem&lt;/span&gt; plating" or "&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_4"&gt;tinplating&lt;/span&gt;" instead.  Later it corrects my misspelling of "&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_5"&gt;doohickies&lt;/span&gt;" to "doohickeys".&lt;br /&gt;&lt;br /&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_6"&gt;Hmmm&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;&lt;span class="blsp-spelling-corrected" id="SPELLING_ERROR_7"&gt;Interestingly&lt;/span&gt;, &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_8"&gt;Blogger's&lt;/span&gt; spellcheck also identifies both "&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_9"&gt;templating&lt;/span&gt;" and "&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_10"&gt;doohickies&lt;/span&gt;" (but not "doohickeys") as an error, but it says that there ain't no such thing as "&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_11"&gt;tem&lt;/span&gt;" or "&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_12"&gt;tinplating&lt;/span&gt;" either.  Its suggestions are a bit odd as well - it thinks that when I typed "&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_13"&gt;tinplating&lt;/span&gt;" above, I might have really meant "downplaying".  Huh?&lt;/p&gt;</content></entry><entry><title>Alphabet soup</title><updated>2007-01-17T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2007/01/17/alphabet-soup/" /><id>urn:pro-grammati-ca:feed:post:Alphabet soup</id><content type="html">&lt;p&gt;My daughter has a set of alphabet fridge magnets - one for each letter.  While playing with them (yes, I play with them more than she does), it occurred to me to wonder "What's the longest word I can make, given that I only have one of each letter?".  And of course, it occurred to me a second later that I could write a program that would find out the answer.  Being the geek that I am, I immediately grabbed my laptop and whipped up some code.&lt;br /&gt;&lt;br /&gt;I remembered that I had a file kicking around that I got from &lt;a href="http://www.itasoftware.com/careers/puzzles/WORD.LST"&gt;here&lt;/a&gt;.  It's just a big-ass text file with a whole lot of words in it (173528 of them - didn't know there were that many words in English, did you?).   A few seconds later I had my answer.   Don't worry, I won't give it away, because I know you are dying to code it up yourself, and I don't want to ruin your fun.   Go ahead and do it now - I'll wait.&lt;br /&gt;&lt;br /&gt;.&lt;br /&gt;.&lt;br /&gt;.&lt;br /&gt;Done?  Good.  Wasn't that fun?  I hope you got the same answer I did.  Hint:  if you wrote more than one line of code, you're probably using the wrong language ;)&lt;br /&gt;&lt;br /&gt;Okay, now on to the really fun stuff.  The next thing that occurred to me was "Can I make a set of words that use up all 26 letters?".  So once again, off to the laptop to find the answer.  Well, as it turns out, that one seems to require a little more than one line of code.  And more importantly, it seems to require an awfully long time to run.  I got as far as letting it run overnight once, and the best I got so far was 25 letters.&lt;br /&gt;&lt;br /&gt;So I don't have a solution for this, but I'll come back to it someday.&lt;/p&gt;</content></entry><entry><title>Boost::Python</title><updated>2006-07-06T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2006/07/06/boostpython/" /><id>urn:pro-grammati-ca:feed:post:Boost::Python</id><content type="html">&lt;p&gt;I finally got around to spending a day on boost::python, which I've been meaning to do for years.  It was a disappointing experience, but I can't say that I'm surprised.  I always had the impression that boost::python would be one of those tools that works great and seems to be really powerful as long as you are doing something that is very nearly exactly what the tutorial is doing.  As soon as you try to diverge from that you run into problems.  Problems like:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Understanding error messages is impossible, because the code is alien-voodoo template magic that humans can never understand.&lt;/li&gt;&lt;li&gt;Building is a nightmare, because you pretty much have to use bjam, which is just like boost::python itself in that you have to follow the examples from the docs, or you're sunk.  Trying to find out how to do anything else is a lost cause.&lt;/li&gt;&lt;/ul&gt;My nightmare for the last two hours has been trying to get bjam to link to a .lib file.  Sounds easy, right?  Well it's not.  Googling for a solution has only led me to believe that:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;No one else in the world is using boost on Windows.  They're all Linux weenies.&lt;/li&gt;&lt;li&gt;Everyone who writes about boost assumes that everyone else in the world already knows how to do this, so they don't bother to explain it.&lt;/li&gt;&lt;li&gt;No one in the world has ever used boost::python to write a wrapper for a DLL.  If they had, they would have had exactly the problem that I'm having, they would have written to the C++-sig list for an answer, and I would have found that answer on google.&lt;/li&gt;&lt;/ul&gt;OK, I feel very slightly better.  Now I can go home.&lt;/p&gt;</content></entry><entry><title>Lazy buggers...</title><updated>2005-06-15T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2005/06/15/lazy-buggers/" /><id>urn:pro-grammati-ca:feed:post:Lazy buggers...</id><content type="html">&lt;p&gt;It drives me nuts that someone at Microsoft declared sprintf as "sprintf(const char*, const char*, ...)", because that's what I see in my intellisense every time I use it. What are the arguments? Is it format, then string, or string then format? I don't know! And because that lazy bugger at Microsoft didn't declare it as "sprintf(const char* str, const char* fmt, ...)" (or is it the other way?), I have to go and look it up every single time!&lt;/p&gt;</content></entry><entry><title>Learning Lisp</title><updated>2005-05-25T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2005/05/25/learning-lisp/" /><id>urn:pro-grammati-ca:feed:post:Learning Lisp</id><content type="html">&lt;p&gt;I have read several times that one should learn a new programming language every year - not with the specific intent to actually use it, but for the potential mind-exapansion that an unfamiliar language's capabilities can imbue.&lt;br /&gt;&lt;br /&gt;I learned to program like this:&lt;br /&gt;* Java, in comp-sci 101, in the last semester of my fourth undergraduate year. I emerged from this course without the slightest idea of how to use a computer in any way, much less how to write an actual program. I did, however, get a ninety-something percent in the course, based on my ability to write algorithms in Java with a pencil and paper during the final exam.&lt;br /&gt;* HTML and VBScript, at ITI. Fortunately I had the good sense to eschew FrontPage, and wrote all my HTML in notepad, learning by looking at the source of other people's web pages.&lt;br /&gt;* VB 6.  I'll say no more.&lt;br /&gt;* Java again - this time with zero emphasis on algorithms (interestingly, I'm quite sure that the word "algorithm" was never once spoken by any of my teachers in my nine months at ITI), and lots of emphasis on getting an actual program that worked.&lt;br /&gt;* SQL, in amongst the VB and Java.&lt;br /&gt;* There was a course that used Oracle's PL/SQL language, which I managed to ignore as much as I could without failing the course.&lt;br /&gt;* Around this time, I taught myself JavaScript and ColdFusion, intending to become a web developer, which I did.&lt;br /&gt;* Two and a half years as a web developer. During this time I learned more JavaScript, more SQL, continually used ASP (VBScript) and ColdFusion, quite a lot of VB 6 (not by choice), occasionally Java, and of course got to know HTML inside and out.&lt;br /&gt;* I also made a fairly concerted effort teach myself C++. This is a hard path to take without guidance, but I'm immensely glad that I did. When I left my web development gig and dropped myself headlong into a C++/Windows destop developer role, my extensive reading on C++ kept me from drowning - I found I had quite a bid of ingrained knowledge to fall back on when things just didn't seem to work right (which, with C++, is pretty much all the time).&lt;br /&gt;* Finally, about four years ago, I somewhat randomly came across a language called Python. As there was a good tutorial on line, I started to learn it one day. That was my downfall.&lt;br /&gt;&lt;br /&gt;In the four years since learning Python, I have not felt the need to learn another language (except C++, by neccesity). I have stagnated. Python has always done what I want it to. Even now, I am still frequently amazed by how much easier it is to get something done in Python than it is in, say, C or Java or VB. I have isolated myself from the wider world of programming - when I need to get something done, I always turn to Python and look for the right add-on module or tool or technique to get it done - and I always seem to find it. But what am I missing out on?&lt;br /&gt;&lt;br /&gt;It would be absurd for me to believe that Python is the &lt;span style="font-style: italic;"&gt;best&lt;/span&gt; language there is. What evidence would I have to support that? The claims of people on the Python newsgroup? What do they know? Evey language has adherents who vehemently believe that it's the best there is. They can't all be right.&lt;br /&gt;&lt;br /&gt;So this past weekend, I finally took a step. I printed off most of Paul Graham's OnLisp, and started reading it over the weekend. I got through to chapter 10. I have a passing familiarity with Lisp - just enough that the code samples weren't completely over my head. This is not intended to be a book for learning Lisp, but a treatise on the use of Macros. Graham claims that macros, more than any other language feature, are what sets Lisp above all other languages in power. So, the intent being to expand my mind to possibilities that lie outiside the realm of the languages I know, I decided to learn Lisp this way.&lt;br /&gt;&lt;br /&gt;I was a bit weird trying to learn Lisp while loungin around at the cottage, where there is no computer. I wan't able to try out any of the examples myself - I had to just read them and try to understand what they were doing. This turned out to be not too hard to do.&lt;br /&gt;&lt;br /&gt;So what's my impression of Lisp so far (up to chapter 10?). It's not nearly as compelling (yet) as Graham tries to make it sound. He is continually talking about much better Lisp is than "other languages", but in only one spot did I see any other languages mentioned by name, and these were C, Pascal, and Fortran. Clearly, to someone coming from that sort of background, Lisp would be a radical paradigm shift - but to someone coming from a language like Python, there not (yet) much that's new. There are a few Lisp features that make me say "hey, that would be handy in Python", and just as many that make me say "man, that code looks awkward - it would be way cleaner in Python". But to be fair, the main thrust of the book - the illustration of the power of macros - is still ahead. I haven't read far enough to have an appreciation for whether macros really are something new and magical to me, or if they are just a curiosity. So far, the cynical part of my is saying "all macros do is move some of the complexity from run time to compile time - if a program runs fast enough anyway, so what?". But I'm keeping an open mind, and I'll read on in the weeks ahead.&lt;br /&gt;&lt;br /&gt;Lisp is just one step. I think sometimes that I should play a bit of catch-up, and learn a few more languages now. Ruby is on my list - I decided to go with Lisp first, because I thought it would have more radical differences from Python, and thus be more mind-expanding. While Ruby has some neat stuff, I suspect it has less to offer that Python doesn't have already. I am eager to try out continuations, however, and either Ruby or Scheme would suffice for that. I wonder what other languages directly support continuations. Stackless Python?&lt;br /&gt;&lt;br /&gt;And, once I get going on learning new stuff, I always get carried away planning all the other new stuff I want to learn. It's really out of control. I think I have more fun planning what I'm going to learn than I do actually learning it. My mental list of languages and tools to learn is ever-changing, and probably includes about 50 items - I just can't remember most of them at any given time.&lt;/p&gt;</content></entry><entry><title>Pulling Hard</title><updated>2004-11-06T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2004/11/06/pulling-hard/" /><id>urn:pro-grammati-ca:feed:post:Pulling Hard</id><content type="html">&lt;p&gt;Training Plan: &lt;br /&gt; &lt;br /&gt;I am going to get stupid-strong this winter. I know, I say that every year - but this year we are going to finally have a good woody at home. Also, I'm turing 35, so if I'm ever going to climb realy really hard, I had better do it soon, before my body deteriorates into a pile of jello. &lt;br /&gt; &lt;br /&gt;I have known for years that I have plateaued because I don't do smart training. Every winter I get strong within the first month or so of starting to go the the gym regularly, but I always reach the same level and then stay there - I can always do about V8 consistently, but I never get past about V10 no matter how much I boulder. I need to break out of my pattern and train a different way this year. &lt;br /&gt; &lt;br /&gt;Key Elements: &lt;br /&gt;1) Weight Training. &lt;br /&gt;2) High fequency, lower volume power training &lt;br /&gt;3) Weighted climing &lt;br /&gt; &lt;br /&gt;Training Techniques: &lt;br /&gt; &lt;br /&gt;My favorite technique is this: develop a circuit of boulder problems - 3 or4 to start with, of varying styles and with some variation in difficulty (but none too easy). After warming up, start with the hardest of these problems, and climb it 3 times in a maximum of 6 attempts. When you have done either 3 successful sends, or 6 attempts, move on the the next-hardest problem. Always rest at least 2 or 3 minutes between attempts (more if you need it). Once you can do 3 sends of each problem, it's time to add another, harder problem to the circuit. Work out the moves, and on your next session this will become the first problem in your circuit. If you can just barely manage to send the problem once in 6 attempts on the fist day that you add it to your circuit, then it is just about the right level of difficulty. After a few weeks, you will be sending it 3 times in a row, and will start working on an even harder problem. &lt;br /&gt; &lt;br /&gt;One nice thing about this system is that after a few months your initial few problems, which were hard for you when you started, are now the "easy" problems that you do at the end of the session, when you are tired, and you still manage to send them 3-in-a-row every time. By this time you have done these problems a hundred times, and have become so efficient at them that you don't have to think at all - you are purely focused on being strong enough to hold on. &lt;br /&gt; &lt;br /&gt;I am thinking about trying a variation on this system where, instead of adding a new problem to the circuit every time I'm ready to advance, I add weight instead. For example, say I start with a circuit of 4 problems. As soon as I send them 3 times each in a session, I advance the difficulty by adding 5 pounds to a wieght vest. From this point on, for the rest of my training cycle (~4 months or so), I never do a session without the weight vest on - yes, that's right, NEVER. &lt;br /&gt; &lt;br /&gt;Now I alternate between adding problems and adding weight to up the difficulty. So once I send my 4 problems with the 5 pounds on, I add a problem to the start of the circuit. Once I can send the 5 problems (remember, sending always means 3 times in 6 or fewer attempts) with the 5 pounds on, I go up to, say, 8 or 10 pounds. And so on... &lt;br /&gt; &lt;br /&gt;I figure on upping the difficulty every week or 2 - let's say 3 times per month. Over a 4 month power-training cycle, let's say 10 times, roughly. That's 5 times adding 5 pounds to the vest, and 5 new, increasingly hard problems added to the circuit. &lt;br /&gt; &lt;br /&gt;So at the end of the cycle (if I'm not in the intesive care ward), a session will consist of climbing 9 hard problems 3+ times each - that's a minimum of 27 ascents, or roughly 27 * (5 to 8 moves) ~ 180 moves, all with 25 pounds on the weight vest. Ouch. &lt;br /&gt; &lt;br /&gt;Now comes the fun part - 4 or 5 days after that last, monster session, imagine walking into a comp, or up to the Mushroom Boulder on day one of a late-winter road trip, and pulling down with NO weight-vest on for the first time in almost 4 months - can you imaging how strong you would feel?  Do you know what it feels like to lose 25 pounds overnight?  I don't, yet, but I certainly curious to find out. &lt;br /&gt; &lt;br /&gt;&lt;/p&gt;</content></entry><entry><title>Pulling Hard - Part 2</title><updated>2004-11-06T00:00:00.000Z</updated><author><name>Chris Perkins</name></author><link href="http://pro.grammati.ca/blog/2004/11/06/pulling-hard---part-2/" /><id>urn:pro-grammati-ca:feed:post:Pulling Hard - Part 2</id><content type="html">&lt;p&gt;I realize that my training plan is a bit at odds with point 2 of my self-proclaimed "Key Elements" - "High frequency, High Intensity, Low Volume" (I forgot the "high instensity" part last time).  I'm not entirely sure how to resolve this, but one solution that comes to mind is just to break up the sessions across multiple days. &lt;br /&gt; &lt;br /&gt;For example, let's say I'm at the point where I have 6 problems in my ciruit.  The conventional wisdom (or at least, the way I've always done it) would be to do a full session (18+ ascents) about twice a week - say wednesdays and saturdays.  That way I get totally blasted and sore, feel like I've trained super-hard (which I have), and then rest for 3 full days. &lt;br /&gt; &lt;br /&gt;Instead, I could do a smaller session, using problems 1,3, and 5 one day, do the same again with problems 2,4, and 6 the next day, and then rest only one day. &lt;br /&gt; &lt;br /&gt;This way I could train power 2 days on, one or 2 days off, or 4 times per week.  The total volume per week is the same, but it's just more spread out.  Is this better?  I'm not sure, but I think it might be.  Some of the reading I have done (I can't cite any source right now) suggests that when power training, you should not get pumped.  By doing the full 6-problem session in one day instead of over two days, I think I would only succeed in forcing myself to do the second half of the session while pumped or tired.  The most power gains come from pulling as hard as you can while NOT tired. &lt;br /&gt; &lt;br /&gt;So I think this may be the way to go, especially since I'm going to finally have a home wall to train on this year.  My only concern is whether I will be able to recover enough to do power two days in a row, even if the sessions are short.  I guess I'll find out. &lt;br /&gt; &lt;br /&gt; &lt;br /&gt;&lt;/p&gt;</content></entry></feed>